{"version":3,"sources":["actions/types/tables.ts","store/hooks.ts","utils/tables.ts","utils/validation.ts","actions/creators/tables.ts","components/Table/TableHeadActions/index.tsx","components/Table/TableHead/index.tsx","components/Table/TableRowActions/index.tsx","components/Table/TableBody/index.tsx","components/Table/TableActions/index.tsx","components/Table/TableEmpty/index.tsx","components/Table/index.tsx","components/FormItem/index.tsx","components/Select/index.tsx","components/Input/index.tsx","selectors/tables.ts","config/_cities.ts","components/EditRecordForm/index.tsx","components/EditRecordModal/index.tsx","config/_defaultTableColumns.ts","components/App/index.tsx","reducers/tablesReducer.ts","store/rootReducer.ts","index.tsx","store/index.ts"],"names":["types","useSelector","useReduxSelector","errorMessages","name","surname","age","city","isTextFieldValid","value","trim","length","isNumberFieldValid","isNaN","Number","addErrorClass","baseClass","error","openEditRecordModal","rowId","data","undefined","tableId","type","OPEN_EDIT_MODAL","payload","closeEditRecordModal","CLOSE_EDIT_MODAL","TableHeadActions","dispatch","useDispatch","className","onClick","TableHead","columns","canFill","map","accessor","title","TableRowActions","DELETE_TABLE_CLONE_RECORD","deleteTableCloneRecord","DELETE_TABLE_RECORD","deleteTableRecord","TableBody","Object","keys","id","TableActions","canDelete","tableData","COPY_TABLE","DELETE_TABLE","deleteTable","TableEmpty","colSpan","Table","isClone","FormItem","children","Select","onChange","onBlur","onFocus","options","placeholder","showSearch","option","Input","isNumeric","target","autoComplete","tablesSelector","state","tables","tablesModalSelector","modal","_cities","EditRecordForm","useState","formData","setFormData","errors","setErrors","useEffect","handleChange","deleteError","updatedErrors","reduce","acc","k","handleBlur","isValid","handleFocus","onSubmit","e","preventDefault","validateEditRecordForm","batch","EDIT_TABLE_CLONE_RECORD","editTableCloneRecord","EDIT_TABLE_RECORD","editTableRecord","ADD_TABLE_RECORD","addTableRecord","modalStyles","overlay","backgroundColor","content","top","left","right","bottom","marginRight","width","boxShadow","borderRadius","Modal","setAppElement","EditRecordModal","isOpen","onRequestClose","onAfterClose","RESET_EDIT_FORM","style","closeTimeoutMS","_defaultTableColumns","App","clones","initialState","RootReducer","combineReducers","action","v4","updatedList","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6JAAYA,E,uCCMCC,EAA+CC,K,SDNhDF,K,kCAAAA,E,oCAAAA,E,kCAAAA,E,oCAAAA,E,sCAAAA,E,0CAAAA,E,kDAAAA,E,sDAAAA,E,wBAAAA,E,6BAAAA,M,KEEL,ICAMG,EAAgB,CAC3BC,KAAM,oBACNC,QAAS,uBACTC,IAAK,2BACLC,KAAM,qBAGKC,EAAmB,SAACC,GAAD,QAC9BA,GAAQA,EAAMC,OAAOC,OAAS,GAEnBC,EAAqB,SAACH,GAAD,QAChCA,IAASI,MAAMC,OAAOL,EAAMC,UAwBjBK,EAAgB,SAACC,EAAmBC,GAApB,OAC3BA,EAAK,UAAMD,EAAN,cAA8BA,GCxBxBE,EAAsB,eACjCC,EADiC,uDACV,KACvBC,EAFiC,uDFZwB,CACzDhB,KAAM,GACNC,QAAS,GACTC,IAAK,GACLC,UAAMc,GEWNC,EAHiC,6CAKhC,CACCC,KAAMvB,EAAMwB,gBACZC,QAAS,CAAEH,UAASH,QAAOC,UAMlBM,EAAuB,iBACjC,CAAEH,KAAMvB,EAAM2B,mB,wBCOFC,EAd4B,WACzC,IAAMC,EAAWC,cAMjB,OACE,wBAAQP,KAAK,SAASQ,UAAU,gBAAgBC,QAL7B,WACnBH,EAASX,MAIT,SACE,cAAC,IAAD,OCMSe,EAhBqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,QAAZ,OAClC,uBAAOJ,UAAU,cAAjB,SACE,qBAAIA,UAAU,kBAAd,UACGG,EAAQE,KAAI,gBAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,MAAb,OACX,oBAAIP,UAAU,gCAAd,SACGO,GADgDD,MAKrD,oBAAIN,UAAU,0DAAd,SACGI,GAAW,cAAC,EAAD,YCqCLI,EAtC2B,SAAC,GAA8B,IAA5BjB,EAA2B,EAA3BA,QAASH,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACrDS,EAAWC,cAcjB,OACE,sBAAKC,UAAU,qBAAf,UAEE,wBACER,KAAK,SACLQ,UAAU,8BACVC,QAlBgB,WACpBH,EAASX,EAAoBC,EAAOC,EAAKD,GAAQG,KAc/C,kBASA,wBACEC,KAAK,SACLQ,UAAU,6BACVC,QAvBe,WAEjBH,EADEP,EHyC8B,SAACA,EAAiBH,GAAlB,MACnC,CACCI,KAAMvB,EAAMwC,0BACZf,QAAS,CAAEH,UAASH,UG3CTsB,CAAuBnB,EAASH,GH+Bd,SAACA,GAAD,MAC9B,CACCI,KAAMvB,EAAM0C,oBACZjB,QAAS,CAAEN,UGhCAwB,CAAkBxB,KAgB3B,wBCjBSyB,EAjBqB,SAAC,GAAD,IAAGxB,EAAH,EAAGA,KAAMc,EAAT,EAASA,QAASZ,EAAlB,EAAkBA,QAAlB,OAClC,uBAAOS,UAAU,cAAjB,SACGc,OAAOC,KAAK1B,GAAMgB,KAAI,SAACW,GAAD,OACrB,qBAAIhB,UAAU,aAAd,UACGG,EAAQE,KAAI,gBAAGC,EAAH,EAAGA,SAAH,OACX,oBAAIN,UAAU,cAAd,SACGX,EAAK2B,GAAIV,IADqBA,MAInC,oBAAIN,UAAU,cAAd,SACE,cAAC,EAAD,CAAiBT,QAASA,EAASH,MAAO4B,EAAI3B,KAAMA,QAPxB2B,S,iBCmCvBC,EAjCwB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,UAAW7B,EAAoB,EAApBA,KAAME,EAAc,EAAdA,QACnDO,EAAWC,cAUjB,OACE,sBAAKC,UAAU,iBAAf,UAEE,wBAAQA,UAAU,mBAAmBR,KAAK,SAASS,QAXpC,WLyDI,IAACkB,EKxDtBrB,GLwDsBqB,EKxDH9B,ELyDpB,CACCG,KAAMvB,EAAMmD,WACZ1B,QAAS,CAAEyB,iBKjDT,wBAKCD,GACC,wBACElB,UAAU,kDACVR,KAAK,SACLS,QAhBa,WACnBH,EL6DuB,SAACP,GAAD,MACxB,CAAEC,KAAMvB,EAAMoD,aAAc3B,QAAS,CAAEH,YK9D7B+B,CAAY/B,KAgBf,cAAY,mBAJd,SAME,cAAC,IAAD,UCRKgC,EAvBsB,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,QAASpB,EAAc,EAAdA,QACzCN,EAAWC,cAMjB,OACE,gCACE,6BACE,qBAAIC,UAAU,eAAewB,QAASA,EAAtC,UACE,qBAAKxB,UAAWI,EAAU,OAAS,GAAnC,sBACCA,GACC,wBAAQH,QAVG,WACnBH,EAASX,MAS8Ba,UAAU,mBAAzC,yBCWGyB,EAhBiB,SAAC,GAAD,IAAGtB,EAAH,EAAGA,QAASd,EAAZ,EAAYA,KAAM2B,EAAlB,EAAkBA,GAAIU,EAAtB,EAAsBA,QAAtB,OAC9B,qCACE,cAAC,EAAD,CAAcR,UAAWQ,EAASrC,KAAMA,EAAME,QAASyB,IACvD,qBAAKhB,UAAU,mBAAf,SACE,wBAAOA,UAAU,QAAjB,UACE,cAAC,EAAD,CAAWG,QAASA,EAASC,SAAUsB,IACtCZ,OAAOC,KAAK1B,GAAMT,OAAS,EAC1B,cAAC,EAAD,CAAWuB,QAASA,EAASd,KAAMA,EAAME,QAASyB,IAElD,cAAC,EAAD,CAAYQ,QAASrB,EAAQvB,OAAS,EAAGwB,SAAUsB,a,uCCjB9CC,EANoB,SAAC,GAAD,IAAGzC,EAAH,EAAGA,MAAO0C,EAAV,EAAUA,SAAV,OACjC,sBAAK5B,UAAWhB,EAAc,aAAcE,GAA5C,UACG0C,EADH,IACc1C,GAAS,qBAAKc,UAAU,iBAAf,SAAiCd,Q,QC0C3C2C,EApCkB,SAAC,GAQ3B,IAPLC,EAOI,EAPJA,SACAC,EAMI,EANJA,OACAC,EAKI,EALJA,QACAtD,EAII,EAJJA,MACAuD,EAGI,EAHJA,QACA5D,EAEI,EAFJA,KACA6D,EACI,EADJA,YAUA,OACE,cAAC,IAAD,CACEH,OAVe,WACjBA,EAAO1D,IAUL2D,QAPgB,WAClBA,EAAQ3D,IAONyD,SAAUA,EACVpD,MAAOA,EACPwD,YAAaA,EACblC,UAAU,sCACVmC,YAAU,EAPZ,SASGF,EAAQ5B,KAAI,SAAC+B,GAAD,OACX,cAAC,IAAD,CAAQ1D,MAAO0D,EAAf,SACGA,GADyBA,SCGrBC,EAjCiB,SAAC,GAQ1B,IAPLP,EAOI,EAPJA,SACAE,EAMI,EANJA,QACAD,EAKI,EALJA,OACA1D,EAII,EAJJA,KACAK,EAGI,EAHJA,MACAwD,EAEI,EAFJA,YACAI,EACI,EADJA,UAYA,OACE,uBACER,SAAUA,EACVC,OAbe,SAAC,GAAoD,IAC9D1D,EAD6D,EAAjDkE,OACZlE,KACR0D,EAAO1D,EAAyBiE,IAY9BN,QATgB,SAAC,GAAoD,IAC/D3D,EAD8D,EAAjDkE,OACblE,KACR2D,EAAQ3D,IAQNA,KAAMA,EACNK,MAAOA,EACPwD,YAAaA,EACblC,UAAU,oCACVwC,aAAa,SChDNC,EAAiB,SAACC,GAAD,OAAsBA,EAAMC,QAE7CC,EAAsB,SAACF,GAAD,OACjCD,EAAeC,GAAOG,OCLXC,EAAU,CACrB,SACA,cACA,aACA,UACA,eACA,QACA,UACA,eACA,MACA,OACA,UACA,cACA,YACA,QACA,SACA,YACA,eACA,YACA,aACA,WACA,QACA,QACA,mBACA,aACA,SACA,UACA,SACA,kBACA,WACA,eACA,UACA,SACA,oBACA,eACA,iBACA,aACA,YACA,cACA,WACA,iBACA,UACA,WACA,eACA,UACA,UACA,eACA,cACA,cACA,cACA,UACA,gBACA,YACA,eACA,aACA,iBACA,eACA,eACA,eACA,mBACA,cACA,QACA,SACA,eACA,cACA,YACA,iBACA,qBACA,qBACA,SACA,YACA,OACA,SACA,YACA,iBACA,mBACA,UACA,kBACA,qBACA,cACA,WACA,gBACA,QACA,eACA,eACA,OACA,OACA,cACA,SACA,cACA,eACA,SACA,kBACA,YACA,SACA,aACA,OACA,UACA,gBACA,UACA,cACA,WACA,WACA,SACA,SACA,eACA,QACA,eACA,mBACA,SACA,UACA,eACA,oBACA,QACA,WACA,eACA,sBACA,cACA,aACA,kBACA,YACA,eACA,cACA,mBACA,eACA,UCyEaC,EAlJ0B,WACvC,MAAgCC,mBfnDyB,CACzD3E,KAAM,GACNC,QAAS,GACTC,IAAK,GACLC,UAAMc,Ie+CN,mBAAO2D,EAAP,KAAiBC,EAAjB,KAIA,EAA4BF,mBAAiC,IAA7D,mBAAOG,EAAP,KAAeC,EAAf,KAEA,EAAiClF,EAAY0E,GAArCvD,EAAR,EAAQA,KAAMD,EAAd,EAAcA,MAAOG,EAArB,EAAqBA,QAEfO,EAAWC,cAEjBsD,qBAAU,WACRH,EAAY7D,KACX,CAACA,IAEJ,IA8BMiE,EAAe,SAAC,GAAqD,IAAnDf,EAAkD,EAAlDA,OACd7D,EAAgB6D,EAAhB7D,MAAOL,EAASkE,EAATlE,KACf6E,EAAY,2B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","file":"static/js/main.bd987a96.chunk.js","sourcesContent":["export enum types {\n  OPEN_EDIT_MODAL = \"OPEN_EDIT_MODAL\",\n  CLOSE_EDIT_MODAL = \"CLOSE_EDIT_MODAL\",\n  RESET_EDIT_FORM = \"RESET_EDIT_FORM\",\n  ADD_TABLE_RECORD = \"ADD_TABLE_RECORD\",\n  EDIT_TABLE_RECORD = \"EDIT_TABLE_RECORD\",\n  DELETE_TABLE_RECORD = \"DELETE_TABLE_RECORD\",\n  EDIT_TABLE_CLONE_RECORD = \"EDIT_TABLE_CLONE_RECORD\",\n  DELETE_TABLE_CLONE_RECORD = \"DELETE_TABLE_CLONE_RECORD\",\n  COPY_TABLE = \"COPY_TABLE\",\n  DELETE_TABLE = \"DELETE_TABLE\",\n}\n","import {\n  useSelector as useReduxSelector,\n  TypedUseSelectorHook,\n} from \"react-redux\";\nimport { RootState } from \"./rootReducer\";\n\nexport const useSelector: TypedUseSelectorHook<RootState> = useReduxSelector;\n","import { TableData } from \"../types/tables\";\n\nexport const createDefaultTableRowData = (): TableData => ({\n  name: \"\",\n  surname: \"\",\n  age: \"\",\n  city: undefined,\n});\n","import { TableData } from \"../types/tables\";\n\nexport const errorMessages = {\n  name: \"please enter name\",\n  surname: \"please enter surname\",\n  age: \"please enter correct age\",\n  city: \"please enter city\",\n};\n\nexport const isTextFieldValid = (value: string | undefined) =>\n  value ? value.trim().length > 0 : false;\n\nexport const isNumberFieldValid = (value: string | undefined) =>\n  value ? !isNaN(Number(value.trim())) : false;\n\nexport const validateEditRecordForm = (formData: TableData) => {\n  const errors: Record<string, string> = {};\n\n  if (!isTextFieldValid(formData.name)) {\n    errors.name = errorMessages.name;\n  }\n\n  if (!isTextFieldValid(formData.surname)) {\n    errors.surname = errorMessages.surname;\n  }\n\n  if (!isNumberFieldValid(formData.age)) {\n    errors.age = errorMessages.age;\n  }\n\n  if (!isTextFieldValid(formData.city)) {\n    errors.city = errorMessages.city;\n  }\n\n  return errors;\n};\n\nexport const addErrorClass = (baseClass: string, error: string | undefined) =>\n  error ? `${baseClass} has-error` : baseClass;\n","/**\n * Types\n */\nimport { types } from \"../types/tables\";\n\n/**\n * Typings\n */\nimport { TableData } from \"../../types/tables\";\nimport { createDefaultTableRowData } from \"../../utils\";\n\n/**\n * Open row config modal\n */\nexport const openEditRecordModal = (\n  rowId: string | null = null,\n  data: TableData = createDefaultTableRowData(),\n  tableId?: string\n) =>\n  ({\n    type: types.OPEN_EDIT_MODAL,\n    payload: { tableId, rowId, data },\n  } as const);\n\n/**\n * Close row config modal\n */\nexport const closeEditRecordModal = () =>\n  ({ type: types.CLOSE_EDIT_MODAL } as const);\n\n/**\n * Reset edit form\n */\nexport const resetEditForm = () => ({ type: types.RESET_EDIT_FORM } as const);\n\n/**\n * Add table record\n */\nexport const addTableRecord = (data: TableData) =>\n  ({\n    type: types.ADD_TABLE_RECORD,\n    payload: { data },\n  } as const);\n\n/**\n * Edit table record\n */\nexport const editTableRecord = (rowId: string, data: TableData) =>\n  ({\n    type: types.EDIT_TABLE_RECORD,\n    payload: { rowId, data },\n  } as const);\n\n/**\n * Edit clone table record\n */\nexport const editTableCloneRecord = (\n  tableId: string,\n  rowId: string,\n  data: TableData\n) =>\n  ({\n    type: types.EDIT_TABLE_CLONE_RECORD,\n    payload: { tableId, rowId, data },\n  } as const);\n\n/**\n * Delete table record\n */\nexport const deleteTableRecord = (rowId: string) =>\n  ({\n    type: types.DELETE_TABLE_RECORD,\n    payload: { rowId },\n  } as const);\n\n/**\n * Delete table clone record\n */\nexport const deleteTableCloneRecord = (tableId: string, rowId: string) =>\n  ({\n    type: types.DELETE_TABLE_CLONE_RECORD,\n    payload: { tableId, rowId },\n  } as const);\n\n/**\n * Create new table from coping\n */\nexport const copyTable = (tableData: Record<string, TableData>) =>\n  ({\n    type: types.COPY_TABLE,\n    payload: { tableData },\n  } as const);\n\n/**\n * Delete table\n */\nexport const deleteTable = (tableId: string) =>\n  ({ type: types.DELETE_TABLE, payload: { tableId } } as const);\n","/**\n * Vendors\n */\nimport React from \"react\";\n\n/**\n * Store\n */\nimport { useDispatch } from \"react-redux\";\nimport { openEditRecordModal } from \"../../../actions/creators\";\n\n/**\n * Icon\n */\nimport PlusCircleFilled from \"@ant-design/icons/PlusCircleFilled\";\n\n/**\n * Typings\n */\ntype TProps = {};\n\nconst TableHeadActions: React.FC<TProps> = () => {\n  const dispatch = useDispatch();\n\n  const clickHandler = () => {\n    dispatch(openEditRecordModal());\n  };\n\n  return (\n    <button type=\"button\" className=\"btn btn--link\" onClick={clickHandler}>\n      <PlusCircleFilled />\n    </button>\n  );\n};\n\nexport default TableHeadActions;\n","/**\n * Vendors\n */\nimport React from \"react\";\n\n/**\n * Components\n */\nimport TableHeadActions from \"../TableHeadActions\";\n\n/**\n * Typings\n */\nimport { TColumn } from \"../index\";\n\ntype TProps = {\n  columns: TColumn[];\n  canFill: boolean;\n};\n\nconst TableHead: React.FC<TProps> = ({ columns, canFill }) => (\n  <thead className=\"table__head\">\n    <tr className=\"table__head-row\">\n      {columns.map(({ accessor, title }) => (\n        <th className=\"table__cell table__cell--head\" key={accessor}>\n          {title}\n        </th>\n      ))}\n\n      <th className=\"table__cell table__cell--head table__cell--head-actions\">\n        {canFill && <TableHeadActions />}\n      </th>\n    </tr>\n  </thead>\n);\n\nexport default TableHead;\n","/**\n * Vendors\n */\nimport React from \"react\";\n\n/**\n * Store\n */\nimport { useDispatch } from \"react-redux\";\nimport {\n  openEditRecordModal,\n  deleteTableRecord,\n  deleteTableCloneRecord,\n} from \"../../../actions/creators\";\n\n/**\n * Typings\n */\nimport { TableData } from \"../../../types/tables\";\n\ntype TProps = {\n  tableId?: string;\n  rowId: string;\n  data: Record<string, TableData>;\n};\n\n/**\n * Expo\n */\nconst TableRowActions: React.FC<TProps> = ({ tableId, rowId, data }) => {\n  const dispatch = useDispatch();\n\n  const handleEditRow = () => {\n    dispatch(openEditRecordModal(rowId, data[rowId], tableId));\n  };\n\n  const handleDelete = () => {\n    if (tableId) {\n      dispatch(deleteTableCloneRecord(tableId, rowId));\n    } else {\n      dispatch(deleteTableRecord(rowId));\n    }\n  };\n\n  return (\n    <div className=\"table__row-actions\">\n      {/* EDIT ROW */}\n      <button\n        type=\"button\"\n        className=\"btn btn--link primary-color\"\n        onClick={handleEditRow}\n      >\n        Edit\n      </button>\n\n      {/* DELETE ROW */}\n      <button\n        type=\"button\"\n        className=\"btn btn--link danger-color\"\n        onClick={handleDelete}\n      >\n        Delete\n      </button>\n    </div>\n  );\n};\n\nexport default TableRowActions;\n","/**\n * Vendors\n */\nimport React from \"react\";\n\n/**\n * Components\n */\nimport TableRowActions from \"../TableRowActions\";\n\n/**\n * Typings\n */\nimport { TableData } from \"../../../types/tables\";\nimport { TColumn } from \"../index\";\n\ntype TProps = {\n  data: Record<string, TableData>;\n  columns: TColumn[];\n  tableId?: string;\n};\n\nconst TableBody: React.FC<TProps> = ({ data, columns, tableId }) => (\n  <tbody className=\"table__body\">\n    {Object.keys(data).map((id) => (\n      <tr className=\"table__row\" key={id}>\n        {columns.map(({ accessor }) => (\n          <td className=\"table__cell\" key={accessor}>\n            {data[id][accessor]}\n          </td>\n        ))}\n        <td className=\"table__cell\">\n          <TableRowActions tableId={tableId} rowId={id} data={data} />\n        </td>\n      </tr>\n    ))}\n  </tbody>\n);\n\nexport default TableBody;\n","/**\n * Vendors\n */\nimport React from \"react\";\n\n/**\n * Icons\n */\nimport CloseOutlined from \"@ant-design/icons/CloseOutlined\";\n\n/**\n * Store\n */\nimport { useDispatch } from \"react-redux\";\nimport { copyTable, deleteTable } from \"../../../actions/creators\";\n\n/**\n * Typings\n */\nimport { TableData } from \"../../../types/tables\";\n\ntype TProps = {\n  canDelete: boolean;\n  data: Record<string, TableData>;\n  tableId?: string;\n};\n\nconst TableActions: React.FC<TProps> = ({ canDelete, data, tableId }) => {\n  const dispatch = useDispatch();\n\n  const handleCopy = () => {\n    dispatch(copyTable(data));\n  };\n\n  const handleDelete = () => {\n    dispatch(deleteTable(tableId!));\n  };\n\n  return (\n    <div className=\"table__actions\">\n      {/* COPY TABLE */}\n      <button className=\"btn btn--primary\" type=\"button\" onClick={handleCopy}>\n        Copy table\n      </button>\n\n      {/* DELETE TABLE */}\n      {canDelete && (\n        <button\n          className=\"btn btn--link danger-color table__actions-close\"\n          type=\"button\"\n          onClick={handleDelete}\n          data-testid=\"delete-table-btn\"\n        >\n          <CloseOutlined />\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default TableActions;\n","/**\n * Vendors\n */\nimport React from \"react\";\n\n/**\n * Store\n */\nimport { useDispatch } from \"react-redux\";\nimport { openEditRecordModal } from \"../../../actions/creators\";\n\n/**\n * Typings\n */\ntype TProps = {\n  colSpan: number;\n  canFill: boolean;\n};\n\n/**\n * Expo\n */\nconst TableEmpty: React.FC<TProps> = ({ colSpan, canFill }) => {\n  const dispatch = useDispatch();\n\n  const clickHandler = () => {\n    dispatch(openEditRecordModal());\n  };\n\n  return (\n    <tbody>\n      <tr>\n        <td className=\"table__empty\" colSpan={colSpan}>\n          <div className={canFill ? \"mb-1\" : \"\"}>No data </div>\n          {canFill && (\n            <button onClick={clickHandler} className=\"btn btn--primary\">\n              Add\n            </button>\n          )}\n        </td>\n      </tr>\n    </tbody>\n  );\n};\n\nexport default TableEmpty;\n","/**\n * Vendors\n */\nimport React from \"react\";\n\n/**\n * Components\n */\nimport TableHead from \"./TableHead\";\nimport TableBody from \"./TableBody\";\nimport TableActions from \"./TableActions\";\nimport TableEmpty from \"./TableEmpty\";\n\n/**\n * Typings\n */\nimport { TableData } from \"../../types/tables\";\n\nexport type TColumn = {\n  accessor: keyof TableData;\n  title: string;\n};\n\ntype TProps = {\n  columns: TColumn[];\n  data: Record<string, TableData>;\n  isClone: boolean;\n  id?: string;\n};\n\nconst Table: React.FC<TProps> = ({ columns, data, id, isClone }) => (\n  <>\n    <TableActions canDelete={isClone} data={data} tableId={id} />\n    <div className=\"table-responsive\">\n      <table className=\"table\">\n        <TableHead columns={columns} canFill={!isClone} />\n        {Object.keys(data).length > 0 ? (\n          <TableBody columns={columns} data={data} tableId={id} />\n        ) : (\n          <TableEmpty colSpan={columns.length + 1} canFill={!isClone} />\n        )}\n      </table>\n    </div>\n  </>\n);\n\nexport default Table;\n","/**\n * Vendors\n */\nimport React from \"react\";\nimport { addErrorClass } from \"../../utils\";\n\n/**\n * Typings\n */\ntype TProps = {\n  error: string | undefined;\n};\n\n/**\n * Expo\n */\nconst FormItem: React.FC<TProps> = ({ error, children }) => (\n  <div className={addErrorClass(\"form__item\", error)}>\n    {children} {error && <div className=\"form__feedback\">{error}</div>}\n  </div>\n);\n\nexport default FormItem;\n","/**\n * Vendors\n */\nimport React from \"react\";\nimport { default as RCSelect, Option } from \"rc-select\";\n\n/**\n * Typings\n */\nimport { TableData } from \"../../types/tables\";\n\ntype TProps = {\n  onChange: (value: string) => void;\n  onBlur: (name: keyof TableData, isNumeric?: boolean) => void;\n  onFocus: (name: keyof TableData) => void;\n  value: string | undefined;\n  options: string[];\n  name: keyof TableData;\n  placeholder: string;\n};\n\n/**\n * Expo\n */\nconst Select: React.FC<TProps> = ({\n  onChange,\n  onBlur,\n  onFocus,\n  value,\n  options,\n  name,\n  placeholder,\n}) => {\n  const handleBlur = () => {\n    onBlur(name);\n  };\n\n  const handleFocus = () => {\n    onFocus(name);\n  };\n\n  return (\n    <RCSelect\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={onChange}\n      value={value}\n      placeholder={placeholder}\n      className=\"form__control form__control--select\"\n      showSearch\n    >\n      {options.map((option) => (\n        <Option value={option} key={option}>\n          {option}\n        </Option>\n      ))}\n    </RCSelect>\n  );\n};\n\nexport default Select;\n","/**\n * Vendors\n */\nimport React from \"react\";\nimport { TableData } from \"../../types/tables\";\n\n/**\n * Typings\n */\ntype TProps = {\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onBlur: (name: keyof TableData, isNumeric?: boolean) => void;\n  onFocus: (name: keyof TableData) => void;\n  name: string;\n  value: string;\n  placeholder: string;\n  isNumeric?: boolean;\n};\n\n/**\n * Expo\n */\nconst Input: React.FC<TProps> = ({\n  onChange,\n  onFocus,\n  onBlur,\n  name,\n  value,\n  placeholder,\n  isNumeric,\n}) => {\n  const handleBlur = ({ target }: React.FocusEvent<HTMLInputElement>) => {\n    const { name } = target;\n    onBlur(name as keyof TableData, isNumeric);\n  };\n\n  const handleFocus = ({ target }: React.FocusEvent<HTMLInputElement>) => {\n    const { name } = target;\n    onFocus(name as keyof TableData);\n  };\n\n  return (\n    <input\n      onChange={onChange}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      name={name}\n      value={value}\n      placeholder={placeholder}\n      className=\"form__control form__control--text\"\n      autoComplete=\"off\"\n    />\n  );\n};\n\nexport default Input;\n","import { RootState } from \"../store/rootReducer\";\n\nexport const tablesSelector = (state: RootState) => state.tables;\n\nexport const tablesModalSelector = (state: RootState) =>\n  tablesSelector(state).modal;\n","export const _cities = [\n  \"Aglona\",\n  \"Ainaži\",\n  \"Aizkraukle\",\n  \"Aizpute\",\n  \"Aknīste\",\n  \"Aloja\",\n  \"Alsunga\",\n  \"Alūksne\",\n  \"Ape\",\n  \"Auce\",\n  \"Baldone\",\n  \"Baloži\",\n  \"Baltinava\",\n  \"Balvi\",\n  \"Bauska\",\n  \"Bolderaja\",\n  \"Brocēni\",\n  \"Carnikava\",\n  \"Cēsis\",\n  \"Cesvaine\",\n  \"Cibla\",\n  \"Dagda\",\n  \"Daugavgrīva\",\n  \"Daugavpils\",\n  \"Dobele\",\n  \"Dundaga\",\n  \"Engure\",\n  \"Ērgļi\",\n  \"Garkalne\",\n  \"Grobiņa\",\n  \"Gulbene\",\n  \"Iecava\",\n  \"Ikšķile\",\n  \"Ilūkste\",\n  \"Inčukalns\",\n  \"Jaunaglona\",\n  \"Jaunciems\",\n  \"Jaunjelgava\",\n  \"Jaunpils\",\n  \"Jēkabpils\",\n  \"Jelgava\",\n  \"Jumprava\",\n  \"Jūrmala\",\n  \"Kandava\",\n  \"Karosta\",\n  \"Kārsava\",\n  \"Ķegums\",\n  \"Ķekava\",\n  \"Kocēni\",\n  \"Koknese\",\n  \"Krāslava\",\n  \"Krustpils\",\n  \"Kuldīga\",\n  \"Lieģi\",\n  \"Lielvārde\",\n  \"Liepāja\",\n  \"Līgatne\",\n  \"Limbaži\",\n  \"Līvāni\",\n  \"Lubāna\",\n  \"Ludza\",\n  \"Madona\",\n  \"Mālpils\",\n  \"Mārupe\",\n  \"Mazsalaca\",\n  \"Mežaparks\",\n  \"Mūrmuiža\",\n  \"Naukšēni\",\n  \"Nereta\",\n  \"Nīca\",\n  \"Ogre\",\n  \"Olaine\",\n  \"Ozolnieki\",\n  \"Pāvilosta\",\n  \"Pilsrundāle\",\n  \"Piltene\",\n  \"Piņķi\",\n  \"Pļaviņas\",\n  \"Preiļi\",\n  \"Priekule\",\n  \"Priekuļi\",\n  \"Rauna\",\n  \"Rēzekne\",\n  \"Riebiņi\",\n  \"Riga\",\n  \"Roja\",\n  \"Ropaži\",\n  \"Rucava\",\n  \"Rugāji\",\n  \"Rūjiena\",\n  \"Sabile\",\n  \"Salacgrīva\",\n  \"Salaspils\",\n  \"Saldus\",\n  \"Saulkrasti\",\n  \"Seda\",\n  \"Sigulda\",\n  \"Skrīveri\",\n  \"Skrunda\",\n  \"Smārde\",\n  \"Smiltene\",\n  \"Staicele\",\n  \"Stalbe\",\n  \"Stende\",\n  \"Strenči\",\n  \"Talsi\",\n  \"Tērvete\",\n  \"Tīreļi\",\n  \"Tukums\",\n  \"Ulbroka\",\n  \"Vaiņode\",\n  \"Valdemārpils\",\n  \"Valka\",\n  \"Valmiera\",\n  \"Vangaži\",\n  \"Varakļāni\",\n  \"Vecpiebalga\",\n  \"Vecumnieki\",\n  \"Vecvārkava\",\n  \"Ventspils\",\n  \"Viesīte\",\n  \"Viļaka\",\n  \"Viļāni\",\n  \"Zelmeņi\",\n  \"Zilupe\",\n];\n","/**\n * Vendors\n */\nimport React, { useEffect, useState } from \"react\";\n\n/**\n * Components\n */\nimport FormItem from \"../FormItem\";\nimport Select from \"../Select\";\nimport Input from \"../Input\";\n\n/**\n * Store\n */\nimport { batch, useDispatch } from \"react-redux\";\nimport { useSelector } from \"../../store/hooks\";\nimport {\n  addTableRecord,\n  closeEditRecordModal,\n  editTableCloneRecord,\n  editTableRecord,\n} from \"../../actions/creators\";\n\n/**\n * Utils\n */\nimport {\n  createDefaultTableRowData,\n  errorMessages,\n  isNumberFieldValid,\n  isTextFieldValid,\n  validateEditRecordForm,\n} from \"../../utils\";\n\n/**\n * Selectors\n */\nimport { tablesModalSelector } from \"../../selectors\";\n\n/**\n * Config\n */\nimport { _cities } from \"../../config/_cities\";\n\n/**\n * Typings\n */\nimport { TableData } from \"../../types/tables\";\n\ntype TProps = {};\n\nconst EditRecordForm: React.FC<TProps> = () => {\n  const [formData, setFormData] = useState<TableData>(\n    createDefaultTableRowData()\n  );\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const { data, rowId, tableId } = useSelector(tablesModalSelector);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setFormData(data);\n  }, [data]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const errors = validateEditRecordForm(formData);\n\n    if (Object.keys(errors).length) {\n      setErrors(errors);\n      return;\n    }\n\n    if (rowId) {\n      if (tableId) {\n        batch(() => {\n          dispatch(closeEditRecordModal());\n          dispatch(editTableCloneRecord(tableId, rowId, formData));\n        });\n      } else {\n        batch(() => {\n          dispatch(closeEditRecordModal());\n          dispatch(editTableRecord(rowId, formData));\n        });\n      }\n    } else {\n      batch(() => {\n        dispatch(closeEditRecordModal());\n        dispatch(addTableRecord(formData));\n      });\n    }\n  };\n\n  const handleChange = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, name } = target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handleCityChange = (city: string | undefined) => {\n    setFormData({ ...formData, city });\n  };\n\n  const deleteError = (name: keyof TableData) => {\n    const updatedErrors = Object.keys(errors).reduce((acc, k) => {\n      if (k === name) {\n        return acc;\n      }\n\n      acc[k] = errors[k];\n\n      return acc;\n    }, {} as Record<string, string>);\n    setErrors(updatedErrors);\n  };\n\n  const handleBlur = (name: keyof TableData, isNumeric?: boolean) => {\n    const isValid = isNumeric\n      ? isNumberFieldValid(formData[name])\n      : isTextFieldValid(formData[name]);\n\n    if (errors[name] && isValid) {\n      deleteError(name);\n    } else if (!errors[name] && !isValid) {\n      setErrors({ ...errors, [name]: errorMessages[name] });\n    }\n  };\n\n  const handleFocus = (name: keyof TableData) => {\n    if (errors[name]) {\n      deleteError(name);\n    }\n  };\n\n  return (\n    <form className=\"form\" onSubmit={handleSubmit}>\n      {/* NAME */}\n      <FormItem error={errors.name}>\n        <Input\n          name=\"name\"\n          placeholder=\"Name\"\n          value={formData.name}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n        />\n      </FormItem>\n\n      {/* SURNAME */}\n      <FormItem error={errors.surname}>\n        <Input\n          name=\"surname\"\n          placeholder=\"Surname\"\n          value={formData.surname}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n        />\n      </FormItem>\n\n      {/* AGE */}\n      <FormItem error={errors.age}>\n        <Input\n          name=\"age\"\n          placeholder=\"Age\"\n          isNumeric\n          value={formData.age}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n        />\n      </FormItem>\n\n      {/* CITY */}\n      <FormItem error={errors.city}>\n        <Select\n          placeholder=\"City\"\n          name=\"city\"\n          onChange={handleCityChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n          value={formData.city}\n          options={_cities}\n        />\n      </FormItem>\n\n      <div className=\"form__item\">\n        <button className=\"btn btn--primary btn--block btn--xl\" type=\"submit\">\n          {rowId ? \"Edit\" : \"Add\"}\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default EditRecordForm;\n","/**\n * Vendors\n */\nimport React from \"react\";\nimport Modal from \"react-modal\";\n\n/**\n * Store\n */\nimport { useDispatch } from \"react-redux\";\nimport { closeEditRecordModal, resetEditForm } from \"../../actions/creators\";\n\n/**\n * Components\n */\nimport EditRecordForm from \"../EditRecordForm\";\n\n/**\n * Styles\n */\nconst modalStyles = {\n  overlay: {\n    backgroundColor: \"rgba(0, 0, 0, 0.35)\",\n  },\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    width: \"280px\",\n    boxShadow: \"0px 4px 4px rgba(0, 0, 0, 0.15)\",\n    borderRadius: \"4px\",\n  },\n};\n\n/**\n * Typings\n */\ntype TProps = {\n  isOpen: boolean;\n};\n\nModal.setAppElement(\"#root\");\n\nconst EditRecordModal: React.FC<TProps> = ({ isOpen }) => {\n  const dispatch = useDispatch();\n\n  const handleClose = () => {\n    dispatch(closeEditRecordModal());\n  };\n\n  const afterCloseHandler = () => {\n    dispatch(resetEditForm());\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={handleClose}\n      onAfterClose={afterCloseHandler}\n      style={modalStyles}\n      closeTimeoutMS={300}\n    >\n      <EditRecordForm />\n    </Modal>\n  );\n};\n\nexport default EditRecordModal;\n","import { TColumn } from \"../components/Table\";\n\nexport const _defaultTableColumns: TColumn[] = [\n  {\n    accessor: \"name\",\n    title: \"Name\",\n  },\n  {\n    accessor: \"surname\",\n    title: \"Surname\",\n  },\n  {\n    accessor: \"age\",\n    title: \"Age\",\n  },\n  {\n    accessor: \"city\",\n    title: \"City\",\n  },\n];\n","/**\n * Vendors\n */\nimport React from \"react\";\n\n/**\n * Store\n */\nimport { useSelector } from \"../../store/hooks\";\n\n/**\n * Components\n */\nimport Table from \"../Table\";\nimport EditRecordModal from \"../EditRecordModal\";\n\n/**\n * Config\n */\nimport { _defaultTableColumns } from \"../../config/_defaultTableColumns\";\n\n/**\n * Selectors\n */\nimport { tablesSelector } from \"../../selectors\";\n\n/**\n * Typings\n */\ntype TProps = {};\n\nconst App: React.FC<TProps> = () => {\n  const { data, clones, modal } = useSelector(tablesSelector);\n\n  return (\n    <div>\n      <Table columns={_defaultTableColumns} data={data} isClone={false} />\n      {Object.keys(clones).map((id) => {\n        return (\n          <Table\n            columns={_defaultTableColumns}\n            data={clones[id]}\n            key={id}\n            id={id}\n            isClone\n          />\n        );\n      })}\n      <EditRecordModal isOpen={modal.isOpen} />\n    </div>\n  );\n};\n\nexport default App;\n","/**\n * Vendors\n */\nimport { v4 } from \"uuid\";\n\n/**\n * Utils\n */\nimport { createDefaultTableRowData } from \"../utils\";\n\n/**\n * Typings\n */\nimport { TableData, TablesModel } from \"../types/tables\";\nimport { CommonReducer } from \"../types/app\";\nimport { types } from \"../actions/types/tables\";\n\n/**\n * Initial state\n */\nexport const initialState: TablesModel = {\n  data: {},\n  clones: {},\n  modal: {\n    isOpen: false,\n    tableId: \"\",\n    rowId: \"\",\n    data: createDefaultTableRowData(),\n  },\n};\n\n/**\n * Reducer\n */\nexport const tablesReducer: CommonReducer<TablesModel> = (\n  state = initialState,\n  action\n) => {\n  switch (action.type) {\n    case types.OPEN_EDIT_MODAL: {\n      const { tableId, rowId, data } = action.payload;\n      return {\n        ...state,\n        modal: {\n          isOpen: true,\n          tableId,\n          rowId,\n          data,\n        },\n      };\n    }\n\n    case types.CLOSE_EDIT_MODAL: {\n      return {\n        ...state,\n        modal: {\n          ...state.modal,\n          isOpen: false,\n        },\n      };\n    }\n\n    case types.RESET_EDIT_FORM: {\n      return {\n        ...state,\n        modal: initialState.modal,\n      };\n    }\n\n    case types.ADD_TABLE_RECORD: {\n      const { data } = action.payload;\n\n      return {\n        ...state,\n        data: { ...state.data, [v4()]: data },\n      };\n    }\n\n    case types.EDIT_TABLE_RECORD: {\n      const { rowId, data } = action.payload;\n\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [rowId]: data,\n        },\n      };\n    }\n\n    case types.EDIT_TABLE_CLONE_RECORD: {\n      const { rowId, data, tableId } = action.payload;\n\n      return {\n        ...state,\n        clones: {\n          ...state.clones,\n          [tableId]: { ...state.clones[tableId], [rowId]: data },\n        },\n      };\n    }\n\n    case types.DELETE_TABLE_RECORD: {\n      const { rowId } = action.payload;\n\n      const updatedList = Object.keys(state.data).reduce((acc, k) => {\n        if (k === rowId) {\n          return acc;\n        }\n        acc[k] = state.data[k];\n        return acc;\n      }, {} as Record<string, TableData>);\n\n      return {\n        ...state,\n        data: updatedList,\n      };\n    }\n\n    case types.DELETE_TABLE_CLONE_RECORD: {\n      const { tableId, rowId } = action.payload;\n\n      const updatedList = Object.keys(state.clones[tableId]).reduce(\n        (acc, k) => {\n          if (k === rowId) {\n            return acc;\n          }\n          acc[k] = state.clones[tableId][k];\n          return acc;\n        },\n        {} as Record<string, TableData>\n      );\n\n      return {\n        ...state,\n        clones: {\n          ...state.clones,\n          [tableId]: updatedList,\n        },\n      };\n    }\n\n    case types.COPY_TABLE: {\n      const { tableData } = action.payload;\n      return {\n        ...state,\n        clones: { ...state.clones, [v4()]: tableData },\n      };\n    }\n\n    case types.DELETE_TABLE: {\n      const { tableId } = action.payload;\n\n      const updatedList = Object.keys(state.clones).reduce((acc, k) => {\n        if (k === tableId) {\n          return acc;\n        }\n        acc[k] = state.clones[k];\n        return acc;\n      }, {} as Record<string, Record<string, TableData>>);\n\n      return {\n        ...state,\n        clones: updatedList,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n","/**\n * Vendors\n */\nimport { combineReducers } from \"redux\";\n\n/**\n * Reducers\n */\nimport { tablesReducer } from \"../reducers/tablesReducer\";\n\n/**\n * Root state\n */\nimport { TablesModel } from \"../types/tables\";\n\nexport type RootState = {\n  tables: TablesModel;\n};\n\n/**\n * Expo\n */\nexport const RootReducer = combineReducers<RootState>({\n  tables: tablesReducer,\n});\n","/**\n * Vendors\n */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n/**\n * Store\n */\nimport { Provider } from \"react-redux\";\n\n/**\n * Components\n */\nimport App from \"./components/App\";\n\n/**\n * Styles\n */\nimport \"./assets/scss/app.scss\";\n\n/**\n * Store\n */\nimport { configureStore } from \"./store\";\n\nconst store = configureStore();\n\n/**\n * Render\n */\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","/**\n * Vendors\n */\nimport { Store, createStore } from \"redux\";\n\n/**\n * Root state\n */\nimport { RootState, RootReducer } from \"./rootReducer\";\n\n/**\n * Expo\n */\nexport function configureStore(initialState?: RootState): Store<RootState> {\n  return createStore(RootReducer, initialState) as Store<RootState>;\n}\n"],"sourceRoot":""}